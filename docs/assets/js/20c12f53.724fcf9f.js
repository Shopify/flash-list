"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[217],{4059:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"fundamentals/recycling","title":"Recycling","description":"One important thing to understand is how FlashList works under the hood. When an item gets out of the viewport, instead of being destroyed, the component is re-rendered with a different item prop. For example, if you make use of useState in a reused component, you may see state values that were set for that component when it was associated with a different item in the list, and would then need to reset any previously set state when a new item is rendered.","source":"@site/docs/fundamentals/recycling.md","sourceDirName":"fundamentals","slug":"/recycling","permalink":"/flash-list/docs/recycling","draft":false,"unlisted":false,"editUrl":"https://github.com/Shopify/flash-list/blob/main/documentation/docs/fundamentals/recycling.md","tags":[],"version":"current","lastUpdatedBy":"Bartosz Kaszubowski","lastUpdatedAt":1757634122000,"frontMatter":{"id":"recycling","title":"Recycling","slug":"/recycling"},"sidebar":"autoSidebar","previous":{"title":"Performance","permalink":"/flash-list/docs/fundamentals/performance"},"next":{"title":"LayoutAnimation","permalink":"/flash-list/docs/guides/layout-animation"}}');var i=n(4848),o=n(8453);const a={id:"recycling",title:"Recycling",slug:"/recycling"},r=void 0,c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["One important thing to understand is how ",(0,i.jsx)(t.code,{children:"FlashList"})," works under the hood. When an item gets out of the viewport, instead of being destroyed, the component is re-rendered with a different ",(0,i.jsx)(t.code,{children:"item"})," prop. For example, if you make use of ",(0,i.jsx)(t.code,{children:"useState"})," in a reused component, you may see state values that were set for that component when it was associated with a different item in the list, and would then need to reset any previously set state when a new item is rendered."]}),"\n",(0,i.jsxs)(t.p,{children:["FlashList now comes with ",(0,i.jsx)(t.code,{children:"useRecyclingState"})," hook that can reset the state automatically without an additional render."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"const MyItem = ({ item }) => {\n  // value of liked is reset if deps array changes. The hook also accepts a callback to reset anything else if required.\n  const [liked, setLiked] = useRecyclingState(item.liked, [item.someId], () => {\n    // callback\n  });\n\n  return (\n    <Pressable onPress={() => setLiked(true)}>\n      <Text>{liked}</Text>\n    </Pressable>\n  );\n};\n"})}),"\n",(0,i.jsx)(t.p,{children:"When optimizing your item component, try to ensure as few things as possible have to be re-rendered and recomputed when recycling."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(6540);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);