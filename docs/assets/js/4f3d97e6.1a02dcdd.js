"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[429],{5266:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"guides/reanimated","title":"React Native Reanimated","description":"React Native Reanimated is an alternative animation library to the LayoutAnimation API provided by React Native.","source":"@site/versioned_docs/version-1.x/guides/reanimated.md","sourceDirName":"guides","slug":"/guides/reanimated","permalink":"/flash-list/docs/1.x/guides/reanimated","draft":false,"unlisted":false,"editUrl":"https://github.com/Shopify/flash-list/blob/main/documentation/versioned_docs/version-1.x/guides/reanimated.md","tags":[],"version":"1.x","lastUpdatedBy":"Bartosz Kaszubowski","lastUpdatedAt":1757634122000,"frontMatter":{"id":"reanimated","title":"React Native Reanimated"},"sidebar":"autoSidebar","previous":{"title":"Masonry Layout","permalink":"/flash-list/docs/1.x/guides/masonry"},"next":{"title":"SectionList","permalink":"/flash-list/docs/1.x/guides/section-list"}}');var i=a(4848),s=a(8453);const o={id:"reanimated",title:"React Native Reanimated"},r=void 0,d={},c=[{value:"Layout Animations",id:"layout-animations",level:2},{value:"Hooks",id:"hooks",level:2},{value:"Usage",id:"usage",level:3},{value:"Performance",id:"performance",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://www.reanimated2.com/",children:"React Native Reanimated"})," is an alternative animation library to the ",(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/layoutanimation",children:(0,i.jsx)(t.code,{children:"LayoutAnimation"})})," API provided by React Native."]}),"\n",(0,i.jsxs)(t.p,{children:["We support view animations and most of ",(0,i.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/layout_animations/",children:"layout animations"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"layout-animations",children:"Layout Animations"}),"\n",(0,i.jsxs)(t.p,{children:["For layout animations, similarly to the React Native API, you need to call ",(0,i.jsx)(t.a,{href:"/flash-list/docs/1.x/usage#prepareforlayoutanimationrender",children:(0,i.jsx)(t.code,{children:"prepareLayoutAnimationRender()"})})," before removing or inserting an element that you want to animate. Note that we currently support only ",(0,i.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/api/LayoutAnimations/entryAnimations",children:"entering"})," and ",(0,i.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/api/LayoutAnimations/exitAnimations",children:"exiting"})," animations. ",(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/api/LayoutAnimations/layoutTransitions",children:"Layout transitions"})," are not supported"]})," as of now."]}),"\n",(0,i.jsx)(t.h2,{id:"hooks",children:"Hooks"}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["You can use hooks such as ",(0,i.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/api/hooks/useSharedValue",children:(0,i.jsx)(t.code,{children:"useSharedValue"})})," as you would in a normal view. The difference is that since views get recycled, a value can transfer to an unrelated component. You will need to reset such values when a view is recycled - for this, you can pass a prop that uniquely identifies the cell (such as ",(0,i.jsx)(t.code,{children:"id"})," of an item) and run a callback via ",(0,i.jsx)(t.code,{children:"useEffect"}),". You can take inspiration from the following example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import React, { useEffect } from "react";\nimport Animated, { useSharedValue } from "react-native-reanimated";\nimport { FlashList } from "@shopify/flash-list";\n\nconst Item = ({ item }: { item: { id: string } }) => {\n  const myValue = useSharedValue(0);\n  useEffect(() => {\n    // Reset value when id changes (view was recycled for another item)\n    myValue.value = 0;\n  }, [item.id, myValue]);\n  return <Animated.View />;\n};\n\nconst MyList = () => {\n  return <FlashList renderItem={Item} estimatedItemSize={100} />;\n};\n'})}),"\n",(0,i.jsx)(t.h3,{id:"performance",children:"Performance"}),"\n",(0,i.jsx)(t.p,{children:"If you use hooks that accept a dependencies array, make sure to leverage it and include only the minimal set of dependencies."})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var n=a(6540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);