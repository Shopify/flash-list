"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[590],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},8757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/masonry","title":"Masonry Layout","description":"Masonry Layout allows you to create a grid of items with different heights. It is a great way to display a collection of images with different sizes.","source":"@site/docs/guides/masonry-layout.md","sourceDirName":"guides","slug":"/guides/masonry","permalink":"/flash-list/docs/guides/masonry","draft":false,"unlisted":false,"editUrl":"https://github.com/Shopify/flash-list/blob/main/documentation/docs/guides/masonry-layout.md","tags":[],"version":"current","lastUpdatedBy":"Bartosz Kaszubowski","lastUpdatedAt":1757634122000,"frontMatter":{"id":"masonry","title":"Masonry Layout"},"sidebar":"autoSidebar","previous":{"title":"LayoutAnimation","permalink":"/flash-list/docs/guides/layout-animation"},"next":{"title":"React Native Reanimated","permalink":"/flash-list/docs/guides/reanimated"}}');var s=n(4848),r=n(8453);const o={id:"masonry",title:"Masonry Layout"},a=void 0,l={},d=[{value:"FlashList with masonry prop (v2)",id:"flashlist-with-masonry-prop-v2",level:2},{value:"With <code>overrideItemLayout</code>",id:"with-overrideitemlayout",level:3},{value:"<code>optimizeItemArrangement</code> prop",id:"optimizeitemarrangement-prop",level:3},{value:"Migration from v1",id:"migration-from-v1",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Masonry Layout allows you to create a grid of items with different heights. It is a great way to display a collection of images with different sizes."}),"\n",(0,s.jsx)("div",{align:"center",children:(0,s.jsx)("img",{src:"https://user-images.githubusercontent.com/7811728/188055598-41f5c961-0dd0-4bb9-bc6e-22d78596a036.png",height:"500"})}),"\n",(0,s.jsx)(t.h2,{id:"flashlist-with-masonry-prop-v2",children:"FlashList with masonry prop (v2)"}),"\n",(0,s.jsxs)(t.p,{children:["In v2, masonry layout is enabled using the ",(0,s.jsx)(t.code,{children:"masonry"})," prop on ",(0,s.jsx)(t.code,{children:"FlashList"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'import React from "react";\nimport { View, Text } from "react-native";\nimport { FlashList } from "@shopify/flash-list";\nimport { DATA } from "./data";\n\nconst MyMasonryList = () => {\n  return (\n    <FlashList\n      data={DATA}\n      masonry\n      numColumns={2}\n      renderItem={({ item }) => <Text>{item.title}</Text>}\n    />\n  );\n};\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"with-overrideitemlayout",children:["With ",(0,s.jsx)(t.code,{children:"overrideItemLayout"})]}),"\n",(0,s.jsxs)(t.p,{children:["When you want to customize item layout (such as setting different spans), you can use ",(0,s.jsx)(t.a,{href:"/flash-list/docs/usage#overrideitemlayout",children:(0,s.jsx)(t.code,{children:"overrideItemLayout"})}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'import React from "react";\nimport { View, Text, Image } from "react-native";\nimport { FlashList } from "@shopify/flash-list";\n\ninterface MasonryItem {\n  id: string;\n  title: string;\n  height: number;\n  span: number; // Number of columns this item should span\n  imageUrl: string;\n}\n\nconst MyMasonryList = () => {\n  return (\n    <FlashList\n      data={data}\n      masonry\n      numColumns={3}\n      overrideItemLayout={(layout, item) => {\n        // Set the span based on the item\'s span property\n        layout.span = item.span;\n        // Note: In v2, size estimates are no longer needed in overrideItemLayout\n        // The actual height is determined by the rendered component\n      }}\n      renderItem={({ item }) => (\n        <View style={{ backgroundColor: "#f0f0f0", margin: 4 }}>\n          <Image source={{ uri: item.imageUrl }} style={{ flex: 1 }} />\n          <Text>{item.title}</Text>\n        </View>\n      )}\n      keyExtractor={(item) => item.id}\n    />\n  );\n};\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"optimizeitemarrangement-prop",children:[(0,s.jsx)(t.code,{children:"optimizeItemArrangement"})," prop"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"optimizeItemArrangement?: boolean;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When enabled with ",(0,s.jsx)(t.code,{children:"masonry"})," layout, this will try to reduce differences in column height by modifying item order. Default is ",(0,s.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"migration-from-v1",children:"Migration from v1"}),"\n",(0,s.jsxs)(t.p,{children:["If you're migrating from v1's ",(0,s.jsx)(t.code,{children:"MasonryFlashList"}),", here are the key changes:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:["Use ",(0,s.jsx)(t.code,{children:"FlashList"})," with ",(0,s.jsx)(t.code,{children:"masonry"})," prop"]})," instead of ",(0,s.jsx)(t.code,{children:"MasonryFlashList"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"overrideItemLayout"})," no longer needs size estimates"]})," - only use it for setting ",(0,s.jsx)(t.code,{children:"layout.span"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"getColumnFlex"})," is not supported"]})," in v2 masonry layout"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Item heights are determined by actual rendered component"})," rather than estimates"]}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);