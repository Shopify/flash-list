"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[217],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>u});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,f=m["".concat(l,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8617:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=n(8168),o=n(8587),a=(n(6540),n(5680)),i=["components"],s={id:"recycling",title:"Recycling",slug:"/recycling"},l=void 0,c={unversionedId:"fundamentals/recycling",id:"fundamentals/recycling",title:"Recycling",description:"One important thing to understand is how FlashList works under the hood. When an item gets out of the viewport, instead of being destroyed, the component is re-rendered with a different item prop. For example, if you make use of useState in a reused component, you may see state values that were set for that component when it was associated with a different item in the list, and would then need to reset any previously set state when a new item is rendered:",source:"@site/docs/fundamentals/recycling.md",sourceDirName:"fundamentals",slug:"/recycling",permalink:"/flash-list/docs/recycling",editUrl:"https://github.com/Shopify/flash-list/blob/main/documentation/docs/fundamentals/recycling.md",tags:[],version:"current",lastUpdatedBy:"dependabot[bot]",lastUpdatedAt:1724950144,formattedLastUpdatedAt:"8/29/2024",frontMatter:{id:"recycling",title:"Recycling",slug:"/recycling"},sidebar:"autoSidebar",previous:{title:"Writing performant components",permalink:"/flash-list/docs/fundamentals/performant-components"},next:{title:"LayoutAnimation",permalink:"/flash-list/docs/guides/layout-animation"}},d=[],p={toc:d};function m(e){var t=e.components,n=(0,o.A)(e,i);return(0,a.yg)("wrapper",(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"One important thing to understand is how ",(0,a.yg)("inlineCode",{parentName:"p"},"FlashList")," works under the hood. When an item gets out of the viewport, instead of being destroyed, the component is re-rendered with a different ",(0,a.yg)("inlineCode",{parentName:"p"},"item")," prop. For example, if you make use of ",(0,a.yg)("inlineCode",{parentName:"p"},"useState")," in a reused component, you may see state values that were set for that component when it was associated with a different item in the list, and would then need to reset any previously set state when a new item is rendered:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const MyItem = ({ item }) => {\n  const lastItemId = useRef(item.someId);\n  const [liked, setLiked] = useState(item.liked);\n  if (item.someId !== lastItemId.current) {\n    lastItemId.current = item.someId;\n    setLiked(item.liked);\n  }\n\n  return (\n    <Pressable onPress={() => setLiked(true)}>\n      <Text>{liked}</Text>\n    </Pressable>\n  );\n};\n")),(0,a.yg)("p",null,"This follows advice in the ",(0,a.yg)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops"},"React Hooks FAQ on implementing getDerivedStateFromProps"),". Ideally your component hierarchy returned from ",(0,a.yg)("a",{parentName:"p",href:"/flash-list/docs/usage#renderitem"},"renderItem")," should not make use of ",(0,a.yg)("inlineCode",{parentName:"p"},"useState")," for best performance."),(0,a.yg)("p",null,"When optimizing your item component, try to ensure as few things as possible have to be re-rendered and recomputed when recycling."))}m.isMDXComponent=!0}}]);