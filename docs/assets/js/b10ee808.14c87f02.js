"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[346],{3408:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/masonry","title":"Masonry Layout","description":"Masonry Layout allows you to create a grid of items with different heights. It is a great way to display a collection of images with different sizes.","source":"@site/versioned_docs/version-1.x/guides/masonry-layout.md","sourceDirName":"guides","slug":"/guides/masonry","permalink":"/flash-list/docs/1.x/guides/masonry","draft":false,"unlisted":false,"editUrl":"https://github.com/Shopify/flash-list/blob/main/documentation/versioned_docs/version-1.x/guides/masonry-layout.md","tags":[],"version":"1.x","lastUpdatedBy":"Bartosz Kaszubowski","lastUpdatedAt":1757634122000,"frontMatter":{"id":"masonry","title":"Masonry Layout"},"sidebar":"autoSidebar","previous":{"title":"Manual linking","permalink":"/flash-list/docs/1.x/guides/manual-linking"},"next":{"title":"React Native Reanimated","permalink":"/flash-list/docs/1.x/guides/reanimated"}}');var t=s(4848),o=s(8453);const r={id:"masonry",title:"Masonry Layout"},l=void 0,a={},d=[{value:"Unsupported Props",id:"unsupported-props",level:2},{value:"Additional Props",id:"additional-props",level:2},{value:"<code>optimizeItemArrangement</code>",id:"optimizeitemarrangement",level:3},{value:"<code>getColumnFlex</code>",id:"getcolumnflex",level:3},{value:"Additional information in <code>renderItem</code> arguments",id:"additional-information-in-renderitem-arguments",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>scrollToEnd()</code>",id:"scrolltoend",level:3},{value:"<code>scrollToOffset()</code>",id:"scrolltooffset",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Masonry Layout allows you to create a grid of items with different heights. It is a great way to display a collection of images with different sizes."}),"\n",(0,t.jsx)("div",{align:"center",children:(0,t.jsx)("img",{src:"https://user-images.githubusercontent.com/7811728/188055598-41f5c961-0dd0-4bb9-bc6e-22d78596a036.png",height:"500"})}),"\n",(0,t.jsxs)(n.p,{children:["To get started, import ",(0,t.jsx)(n.code,{children:"MasonryFlashList"})," from ",(0,t.jsx)(n.code,{children:"@shopify/flash-list"})," and use it just like you would use ",(0,t.jsx)(n.code,{children:"FlashList"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { View, Text, StatusBar } from "react-native";\nimport { MasonryFlashList } from "@shopify/flash-list";\nimport { DATA } from "./data";\n\nconst MyMasonryList = () => {\n  return (\n    <MasonryFlashList\n      data={DATA}\n      numColumns={2}\n      renderItem={({ item }) => <Text>{item.title}</Text>}\n      estimatedItemSize={200}\n    />\n  );\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," If you want ",(0,t.jsx)(n.code,{children:"MasonryFlashList"})," to optimize item arrangement, enable ",(0,t.jsx)(n.code,{children:"optimizeItemArrangement"})," and pass a valid ",(0,t.jsx)(n.a,{href:"/flash-list/docs/1.x/usage#overrideitemlayout",children:(0,t.jsx)(n.code,{children:"overrideItemLayout"})})," function."]}),"\n",(0,t.jsx)(n.h2,{id:"unsupported-props",children:"Unsupported Props"}),"\n",(0,t.jsxs)(n.p,{children:["There are some props that ",(0,t.jsx)(n.code,{children:"MasonryFlashList"})," does not support when compared to ",(0,t.jsx)(n.code,{children:"FlashList"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/flash-list/docs/1.x/usage#horizontal",children:(0,t.jsx)(n.code,{children:"horizontal"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/flash-list/docs/1.x/usage#inverted",children:(0,t.jsx)(n.code,{children:"inverted"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/flash-list/docs/1.x/usage#initialscrollindex",children:(0,t.jsx)(n.code,{children:"initialScrollIndex"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/flash-list/docs/1.x/usage#viewabilityconfigcallbackpairs",children:(0,t.jsx)(n.code,{children:"viewabilityConfigCallbackPairs"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/flash-list/docs/1.x/usage#onblankarea",children:(0,t.jsx)(n.code,{children:"onBlankArea"})})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"additional-props",children:"Additional Props"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MasonryFlashList"})," supports these additional props on top of ",(0,t.jsx)(n.code,{children:"FlashList"}),":"]}),"\n",(0,t.jsx)(n.h3,{id:"optimizeitemarrangement",children:(0,t.jsx)(n.code,{children:"optimizeItemArrangement"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"optimizeItemArrangement?: boolean;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If enabled, MasonryFlashList will try to reduce difference in column height by modifying item order. If ",(0,t.jsx)(n.code,{children:"true"}),", specifying ",(0,t.jsx)(n.a,{href:"/flash-list/docs/1.x/usage#overrideitemlayout",children:(0,t.jsx)(n.code,{children:"overrideItemLayout"})})," is required. Default value is ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"getcolumnflex",children:(0,t.jsx)(n.code,{children:"getColumnFlex"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"getColumnFlex?: (\n  items: T[],\n  columnIndex: number,\n  maxColumns: number,\n  extraData?: any\n) => number;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getColumnFlex"})," allows you to change the column widths of the list. This is helpful if you want some columns to be wider than the others."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// if `numColumns` is `3`, you can return `2` for `index 1` and `1` for the rest to achieve a `1:2:1` split by width.\ngetColumnFlex={(items, index, maxColumns, extraData) => {\n    return index === 1 ? 2 : 1;\n}}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"additional-information-in-renderitem-arguments",children:["Additional information in ",(0,t.jsx)(n.code,{children:"renderItem"})," arguments"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"export interface MasonryListRenderItemInfo<TItem>\n  extends ListRenderItemInfo<TItem> {\n  columnSpan: number;\n  columnIndex: number;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"MasonryFlashList"})," the ",(0,t.jsx)(n.code,{children:"renderItem"})," prop callback will be called with two additional properties on the ",(0,t.jsx)(n.code,{children:"info"})," object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"columnIndex"}),": A number representing the index of the column in which the item is rendered. When using ",(0,t.jsx)(n.code,{children:"optimizeItemArrangement"})," this becomes more important as the items are no longer spread linearly across the columns."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"columnSpan"}),": A number representing how many columns a given item may span, for now this will always return ",(0,t.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MasonryFlashList"})," exposes the some methods that ",(0,t.jsx)(n.code,{children:"FlashList"})," does. These are:"]}),"\n",(0,t.jsx)(n.h3,{id:"scrolltoend",children:(0,t.jsx)(n.code,{children:"scrollToEnd()"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"scrollToEnd?: (params?: { animated?: boolean | null | undefined });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Scrolls to the end of the content."}),"\n",(0,t.jsx)(n.h3,{id:"scrolltooffset",children:(0,t.jsx)(n.code,{children:"scrollToOffset()"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"scrollToOffset(params: {\n  animated?: boolean | null | undefined;\n  offset: number;\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Scroll to a specific content pixel offset in the list."}),"\n",(0,t.jsxs)(n.p,{children:["Parameter ",(0,t.jsx)(n.code,{children:"offset"})," expects the offset to scroll to."]}),"\n",(0,t.jsxs)(n.p,{children:["Parameter ",(0,t.jsx)(n.code,{children:"animated"})," (",(0,t.jsx)(n.code,{children:"false"})," by default) defines whether the list should animate while scrolling."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);