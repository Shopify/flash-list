"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[385],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},9992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"guides/list-profiling","title":"List Profiling with useBenchmark","description":"The useBenchmark hook provides a comprehensive way to measure and analyze the performance of your FlashList implementation. It automatically scrolls through your list while collecting performance metrics and provides actionable suggestions for optimization.","source":"@site/docs/guides/list-profiling.md","sourceDirName":"guides","slug":"/guides/list-profiling","permalink":"/flash-list/docs/guides/list-profiling","draft":false,"unlisted":false,"editUrl":"https://github.com/Shopify/flash-list/blob/main/documentation/docs/guides/list-profiling.md","tags":[],"version":"current","lastUpdatedBy":"Daniel Friyia","lastUpdatedAt":1758148290000,"frontMatter":{},"sidebar":"autoSidebar","previous":{"title":"LayoutAnimation","permalink":"/flash-list/docs/guides/layout-animation"},"next":{"title":"Masonry Layout","permalink":"/flash-list/docs/guides/masonry"}}');var r=t(4848),i=t(8453);const l={},a="List Profiling with useBenchmark",c={},o=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Manual Benchmark Control",id:"manual-benchmark-control",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Understanding Results",id:"understanding-results",level:2},{value:"Key Metrics",id:"key-metrics",level:3},{value:"Interpreting Results",id:"interpreting-results",level:3},{value:"Performance Suggestions",id:"performance-suggestions",level:2},{value:"Example",id:"example",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"list-profiling-with-usebenchmark",children:"List Profiling with useBenchmark"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useBenchmark"})," hook provides a comprehensive way to measure and analyze the performance of your FlashList implementation. It automatically scrolls through your list while collecting performance metrics and provides actionable suggestions for optimization."]}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useRef } from "react";\nimport { FlashList, FlashListRef, useBenchmark } from "@shopify/flash-list";\n\nfunction MyList() {\n  const flashListRef = useRef<FlashListRef<MyDataType>>(null);\n\n  // Basic benchmark setup\n  useBenchmark(flashListRef, (result) => {\n    console.log("Benchmark complete:", result.formattedString);\n  });\n\n  return <FlashList ref={flashListRef} data={data} renderItem={renderItem} />;\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"manual-benchmark-control",children:"Manual Benchmark Control"}),"\n",(0,r.jsxs)(n.p,{children:["For more control over when the benchmark runs, use the ",(0,r.jsx)(n.code,{children:"startManually"})," option:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'const { startBenchmark, isBenchmarkRunning } = useBenchmark(\n  flashListRef,\n  (result) => {\n    if (!result.interrupted) {\n      Alert.alert("Benchmark Complete", result.formattedString);\n    }\n  },\n  {\n    startManually: true,\n    repeatCount: 3,\n    speedMultiplier: 1.5,\n  }\n);\n\n// Trigger benchmark on button press\n<Button\n  title={isBenchmarkRunning ? "Running..." : "Start Benchmark"}\n  onPress={startBenchmark}\n  disabled={isBenchmarkRunning}\n/>;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useBenchmark"})," hook accepts an optional ",(0,r.jsx)(n.code,{children:"BenchmarkParams"})," object:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"startDelayInMs"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"3000"}),(0,r.jsx)(n.td,{children:"Delay before automatic benchmark start (in milliseconds)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"speedMultiplier"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Multiplier for scroll speed (higher = faster scrolling)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"repeatCount"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Number of times to repeat the benchmark"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"startManually"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsxs)(n.td,{children:["Prevent automatic start, use returned ",(0,r.jsx)(n.code,{children:"startBenchmark"})," function instead"]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"understanding-results",children:"Understanding Results"}),"\n",(0,r.jsxs)(n.p,{children:["The benchmark returns a ",(0,r.jsx)(n.code,{children:"BenchmarkResult"})," object containing:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface BenchmarkResult {\n  js?: {\n    averageFPS: number;\n    minFPS: number;\n    maxFPS: number;\n  };\n  interrupted: boolean;\n  suggestions: string[];\n  formattedString?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"key-metrics",children:"Key Metrics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Average FPS"}),": The average JavaScript frames per second during scrolling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Min FPS"}),": The lowest FPS recorded"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Max FPS"}),": The highest FPS recorded"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"interpreting-results",children:"Interpreting Results"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Good Performance"}),": Average FPS above 50"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Acceptable Performance"}),": Average FPS between 35-50"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Poor Performance"}),": Average FPS below 35"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-suggestions",children:"Performance Suggestions"}),"\n",(0,r.jsx)(n.p,{children:"The benchmark automatically provides suggestions based on your results:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Low JS FPS"})," (< 35 FPS): Indicates components are doing too much work. Consider:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Optimizing render methods"}),"\n",(0,r.jsx)(n.li,{children:"Reducing component complexity"}),"\n",(0,r.jsx)(n.li,{children:"Implementing memoization"}),"\n",(0,r.jsx)(n.li,{children:"Minimizing re-renders"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Small Dataset"})," (< 200 items): Testing with larger datasets provides more realistic performance metrics"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'const generateData = (count: number): DataItem[] => {\n  return Array.from({ length: count }, (_, index) => ({\n    id: `item-${index}`,\n    title: `Item ${index}`,\n    value: Math.floor(Math.random() * 100),\n  }));\n};\n\nconst ManualBenchmarkExample = () => {\n  const flashListRef = useRef<FlashListRef<DataItem>>(null);\n  const [data] = useState(() => generateData(500));\n  const [benchmarkResult, setBenchmarkResult] = useState<string>("");\n\n  const { startBenchmark, isBenchmarkRunning } = useBenchmark(\n    flashListRef,\n    (result) => {\n      if (!result.interrupted) {\n        setBenchmarkResult(result.formattedString || "No results");\n        Alert.alert("Benchmark Complete", result.formattedString);\n      }\n    },\n    {\n      startManually: true,\n      repeatCount: 3,\n      speedMultiplier: 1.5,\n    }\n  );\n\n  const renderItem = ({ item }: { item: DataItem }) => (\n    <View style={styles.item}>\n      <Text style={styles.title}>{item.title}</Text>\n      <Text style={styles.value}>Value: {item.value}</Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerText}>Manual Benchmark Example</Text>\n        <Button\n          title={isBenchmarkRunning ? "Running..." : "Start Benchmark"}\n          onPress={startBenchmark}\n          disabled={isBenchmarkRunning}\n        />\n      </View>\n\n      <FlashList\n        ref={flashListRef}\n        data={data}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.id}\n      />\n\n      {benchmarkResult ? (\n        <View style={styles.resultContainer}>\n          <Text style={styles.resultText}>{benchmarkResult}</Text>\n        </View>\n      ) : null}\n    </View>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test with Production Data"}),": Use realistic data sizes and complexity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run Multiple Iterations"}),": Use ",(0,r.jsx)(n.code,{children:"repeatCount"})," for more accurate averages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test on Target Devices"}),": Performance varies significantly across devices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Benchmark Before and After"}),": Compare results when making optimizations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consider User Scenarios"}),": Test with different scroll speeds using ",(0,r.jsx)(n.code,{children:"speedMultiplier"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);