"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[564],{1827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"fundamentals/recycling","title":"Recycling","description":"One important thing to understand is how FlashList works under the hood. When an item gets out of the viewport, instead of being destroyed, the component is re-rendered with a different item prop. For example, if you make use of useState in a reused component, you may see state values that were set for that component when it was associated with a different item in the list, and would then need to reset any previously set state when a new item is rendered:","source":"@site/versioned_docs/version-1.x/fundamentals/recycling.md","sourceDirName":"fundamentals","slug":"/recycling","permalink":"/flash-list/docs/1.x/recycling","draft":false,"unlisted":false,"editUrl":"https://github.com/Shopify/flash-list/blob/main/documentation/versioned_docs/version-1.x/fundamentals/recycling.md","tags":[],"version":"1.x","lastUpdatedBy":"Bartosz Kaszubowski","lastUpdatedAt":1757634122000,"frontMatter":{"id":"recycling","title":"Recycling","slug":"/recycling"},"sidebar":"autoSidebar","previous":{"title":"Writing performant components","permalink":"/flash-list/docs/1.x/fundamentals/performant-components"},"next":{"title":"LayoutAnimation","permalink":"/flash-list/docs/1.x/guides/layout-animation"}}');var o=n(4848),i=n(8453);const r={id:"recycling",title:"Recycling",slug:"/recycling"},a=void 0,d={},c=[];function l(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["One important thing to understand is how ",(0,o.jsx)(t.code,{children:"FlashList"})," works under the hood. When an item gets out of the viewport, instead of being destroyed, the component is re-rendered with a different ",(0,o.jsx)(t.code,{children:"item"})," prop. For example, if you make use of ",(0,o.jsx)(t.code,{children:"useState"})," in a reused component, you may see state values that were set for that component when it was associated with a different item in the list, and would then need to reset any previously set state when a new item is rendered:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"const MyItem = ({ item }) => {\n  const lastItemId = useRef(item.someId);\n  const [liked, setLiked] = useState(item.liked);\n  if (item.someId !== lastItemId.current) {\n    lastItemId.current = item.someId;\n    setLiked(item.liked);\n  }\n\n  return (\n    <Pressable onPress={() => setLiked(true)}>\n      <Text>{liked}</Text>\n    </Pressable>\n  );\n};\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This follows advice in the ",(0,o.jsx)(t.a,{href:"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops",children:"React Hooks FAQ on implementing getDerivedStateFromProps"}),". Ideally your component hierarchy returned from ",(0,o.jsx)(t.a,{href:"/flash-list/docs/1.x/usage#renderitem",children:"renderItem"})," should not make use of ",(0,o.jsx)(t.code,{children:"useState"})," for best performance."]}),"\n",(0,o.jsx)(t.p,{children:"When optimizing your item component, try to ensure as few things as possible have to be re-rendered and recomputed when recycling."})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);