"use strict";(self.webpackChunkflash_list=self.webpackChunkflash_list||[]).push([[933],{659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/section-list","title":"SectionList","description":"React Native has a convenience component on top of FlatList, called SectionList. This component has some additional props:","source":"@site/docs/guides/section-list.md","sourceDirName":"guides","slug":"/guides/section-list","permalink":"/flash-list/docs/guides/section-list","draft":false,"unlisted":false,"editUrl":"https://github.com/Shopify/flash-list/blob/main/documentation/docs/guides/section-list.md","tags":[],"version":"current","lastUpdatedBy":"Bartosz Kaszubowski","lastUpdatedAt":1757634122000,"frontMatter":{"id":"section-list","title":"SectionList"},"sidebar":"autoSidebar","previous":{"title":"React Native Reanimated","permalink":"/flash-list/docs/guides/reanimated"},"next":{"title":"Testing with Jest","permalink":"/flash-list/docs/testing"}}');var i=n(4848),r=n(8453);const o={id:"section-list",title:"SectionList"},a=void 0,c={},l=[];function d(e){const t={a:"a",code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["React Native has a convenience component on top of ",(0,i.jsx)(t.code,{children:"FlatList"}),", called ",(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/sectionlist",children:(0,i.jsx)(t.code,{children:"SectionList"})}),". This component has some additional props:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/sectionlist#requiredsections",children:(0,i.jsx)(t.code,{children:"sections"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/sectionlist#rendersectionfooter",children:(0,i.jsx)(t.code,{children:"renderSectionFooter"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/sectionlist#rendersectionheader",children:(0,i.jsx)(t.code,{children:"renderSectionHeader"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/sectionlist#sectionseparatorcomponent",children:(0,i.jsx)(t.code,{children:"SectionSeparatorComponent"})})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://reactnative.dev/docs/sectionlist#stickysectionheadersenabled",children:(0,i.jsx)(t.code,{children:"stickySectionHeadersEnabled"})})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.code,{children:"FlashList"})," offers none of these props but all of them are replaceable with existing props."]})}),"\n",(0,i.jsxs)(t.p,{children:["The difficulty of migrating from ",(0,i.jsx)(t.code,{children:"SectionList"})," to ",(0,i.jsx)(t.code,{children:"FlashList"})," will depend on the data you have at hand - the data may be more suitable for ",(0,i.jsx)(t.code,{children:"SectionList"}),", requiring you to massage the data, but the opposite can be true as well. In that case, using ",(0,i.jsx)(t.code,{children:"FlashList"})," instead of ",(0,i.jsx)(t.code,{children:"SectionList"})," might even result in less code."]}),"\n",(0,i.jsxs)(t.p,{children:["Let's go through how to migrate from ",(0,i.jsx)(t.code,{children:"SectionList"})," to ",(0,i.jsx)(t.code,{children:"FlashList"})," in the following example - a contacts list."]}),"\n",(0,i.jsxs)(t.p,{children:["This is how we could write such a list with ",(0,i.jsx)(t.code,{children:"SectionList"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import React from "react";\nimport { SectionList, StyleSheet, Text } from "react-native";\n\ninterface Contact {\n  firstName: string;\n  lastName: string;\n}\n\ninterface Section {\n  title: string;\n  data: Contact[];\n}\n\nconst contacts: Section[] = [\n  { title: "A", data: [{ firstName: "John", lastName: "Aaron" }] },\n  {\n    title: "D",\n    data: [\n      { firstName: "John", lastName: "Doe" },\n      { firstName: "Mary", lastName: "Dianne" },\n    ],\n  },\n];\n\nconst ContactsSectionList = () => {\n  return (\n    <SectionList\n      sections={contacts}\n      renderItem={({ item }) => {\n        return <Text>{item.firstName}</Text>;\n      }}\n      renderSectionHeader={({ section: { title } }) => (\n        <Text style={styles.header}>{title}</Text>\n      )}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 32,\n    backgroundColor: "#fff",\n  },\n});\n'})}),"\n",(0,i.jsxs)(t.p,{children:["To migrate to ",(0,i.jsx)(t.code,{children:"FlashList"}),", we'd need to first convert the ",(0,i.jsx)(t.code,{children:"contacts"})," variable to the following:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'const contacts: (string | Contact)[] = [\n  "A",\n  { firstName: "John", lastName: "Aaron" },\n  "D",\n  { firstName: "John", lastName: "Doe" },\n  { firstName: "Mary", lastName: "Dianne" },\n];\n'})}),"\n",(0,i.jsxs)(t.p,{children:["As you can see, you can add the section item right along with the data. Then in the ",(0,i.jsx)(t.code,{children:"renderItem"}),", you can distinguish what to render based on the type of the item:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'const ContactsFlashList = () => {\n  return (\n    <FlashList\n      data={contacts}\n      renderItem={({ item }) => {\n        if (typeof item === "string") {\n          // Rendering header\n          return <Text style={styles.header}>{item}</Text>;\n        } else {\n          // Render item\n          return <Text>{item.firstName}</Text>;\n        }\n      }}\n      getItemType={(item) => {\n        // To achieve better performance, specify the type based on the item\n        return typeof item === "string" ? "sectionHeader" : "row";\n      }}\n    />\n  );\n};\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can follow a similar pattern as for ",(0,i.jsx)(t.code,{children:"renderItem"})," for the rest of the ",(0,i.jsx)(t.code,{children:"SectionList"}),"'s props."]}),"\n",(0,i.jsxs)(t.p,{children:["If you want your section headers to be sticky, you will also need to compute the array for ",(0,i.jsx)(t.code,{children:"stickyHeaderIndices"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'const stickyHeaderIndices = contacts\n  .map((item, index) => {\n    if (typeof item === "string") {\n      return index;\n    } else {\n      return null;\n    }\n  })\n  .filter((item) => item !== null) as number[];\n'})}),"\n",(0,i.jsxs)(t.p,{children:["And that's it! Below you can find the whole example for ",(0,i.jsx)(t.code,{children:"FlashList"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import React from "react";\nimport { StyleSheet, Text } from "react-native";\nimport { FlashList } from "@shopify/flash-list";\n\ninterface Contact {\n  firstName: string;\n  lastName: string;\n}\n\nconst contacts: (string | Contact)[] = [\n  "A",\n  { firstName: "John", lastName: "Aaron" },\n  "D",\n  { firstName: "John", lastName: "Doe" },\n  { firstName: "Mary", lastName: "Dianne" },\n];\n\nconst stickyHeaderIndices = contacts\n  .map((item, index) => {\n    if (typeof item === "string") {\n      return index;\n    } else {\n      return null;\n    }\n  })\n  .filter((item) => item !== null) as number[];\n\nconst ContactsFlashList = () => {\n  return (\n    <FlashList\n      data={contacts}\n      renderItem={({ item }) => {\n        if (typeof item === "string") {\n          // Rendering header\n          return <Text style={styles.header}>{item}</Text>;\n        } else {\n          // Render item\n          return <Text>{item.firstName}</Text>;\n        }\n      }}\n      stickyHeaderIndices={stickyHeaderIndices}\n      getItemType={(item) => {\n        // To achieve better performance, specify the type based on the item\n        return typeof item === "string" ? "sectionHeader" : "row";\n      }}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 32,\n    backgroundColor: "#fff",\n  },\n});\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);