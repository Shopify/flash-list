diff --git a/node_modules/react-native-safe-area-context/android/src/main/jni/CMakeLists.txt b/node_modules/react-native-safe-area-context/android/src/main/jni/CMakeLists.txt
index 4ee1c8f..c89c4fb 100644
--- a/node_modules/react-native-safe-area-context/android/src/main/jni/CMakeLists.txt
+++ b/node_modules/react-native-safe-area-context/android/src/main/jni/CMakeLists.txt
@@ -1,5 +1,5 @@
 cmake_minimum_required(VERSION 3.13)
-set(CMAKE_VERBOSE_MAKEFILE ON)
+set(CMAKE_VERBOSE_MAKEFILE on)
 
 set(LIB_LITERAL safeareacontext)
 set(LIB_TARGET_NAME react_codegen_${LIB_LITERAL})
@@ -12,7 +12,7 @@ set(LIB_ANDROID_GENERATED_COMPONENTS_DIR ${LIB_ANDROID_GENERATED_JNI_DIR}/react/
 add_compile_options(
   -fexceptions
   -frtti
-  -std=c++20
+  -std=c++17
   -Wall
   -Wpedantic
   -Wno-gnu-zero-variadic-macro-arguments
@@ -50,8 +50,6 @@ target_link_libraries(
   react_render_debug
   react_render_graphics
   react_render_mapbuffer
-  react_render_componentregistry
-  react_utils
   rrc_view
   turbomodulejsijni
   yoga
@@ -63,7 +61,7 @@ target_compile_options(
   -DLOG_TAG=\"ReactNative\"
   -fexceptions
   -frtti
-  -std=c++20
+  -std=c++17
   -Wall
 )
 
diff --git a/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewComponentDescriptor.h b/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewComponentDescriptor.h
index a11321d..fd11385 100644
--- a/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewComponentDescriptor.h
+++ b/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewComponentDescriptor.h
@@ -12,10 +12,11 @@ namespace react {
 class RNCSafeAreaViewComponentDescriptor final
     : public ConcreteComponentDescriptor<RNCSafeAreaViewShadowNode> {
   using ConcreteComponentDescriptor::ConcreteComponentDescriptor;
-  void adopt(ShadowNode &shadowNode) const override {
-    auto &concreteShadowNode =
-        static_cast<RNCSafeAreaViewShadowNode &>(shadowNode);
-    concreteShadowNode.adjustLayoutWithState();
+  void adopt(ShadowNode::Unshared const &shadowNode) const override {
+    auto concreteShadowNode =
+        std::static_pointer_cast<RNCSafeAreaViewShadowNode>(shadowNode);
+
+    concreteShadowNode->adjustLayoutWithState();
 
     ConcreteComponentDescriptor::adopt(shadowNode);
   }
diff --git a/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewShadowNode.cpp b/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewShadowNode.cpp
index 8cb4077..bdb3308 100644
--- a/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewShadowNode.cpp
+++ b/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewShadowNode.cpp
@@ -6,126 +6,113 @@
 #include <algorithm>
 
 namespace facebook {
-namespace react {
+    namespace react {
 
-using namespace yoga;
+        extern const char RNCSafeAreaViewComponentName[] = "RNCSafeAreaView";
 
-extern const char RNCSafeAreaViewComponentName[] = "RNCSafeAreaView";
+        inline YGValue valueFromEdges(YGStyle::Edges edges, YGEdge edge, YGEdge axis) {
+            YGValue edgeValue = edges[edge];
+            if (edgeValue.unit != YGUnitUndefined) {
+                return edgeValue;
+            }
+            YGValue axisValue = edges[axis];
+            if (axisValue.unit != YGUnitUndefined) {
+                return axisValue;
+            }
+            return edges[YGEdgeAll];
+        }
 
-inline Style::Length valueFromEdges(
-    Style::Length edge,
-    Style::Length axis,
-    Style::Length defaultValue) {
-  if (edge.unit() != Unit::Undefined) {
-    return edge;
-  }
-  if (axis.unit() != Unit::Undefined) {
-    return axis;
-  }
-  return defaultValue;
-}
+        inline float
+        getEdgeValue(std::string edgeMode, float insetValue, float edgeValue) {
+            if (edgeMode == "off") {
+                return edgeValue;
+            } else if (edgeMode == "maximum") {
+                return fmax(insetValue, edgeValue);
+            } else {
+                return insetValue + edgeValue;
+            }
+        }
 
-inline float
-getEdgeValue(std::string edgeMode, float insetValue, float edgeValue) {
-  if (edgeMode == "off") {
-    return edgeValue;
-  } else if (edgeMode == "maximum") {
-    return fmax(insetValue, edgeValue);
-  } else {
-    return insetValue + edgeValue;
-  }
-}
+        void RNCSafeAreaViewShadowNode::adjustLayoutWithState() {
+            ensureUnsealed();
 
-void RNCSafeAreaViewShadowNode::adjustLayoutWithState() {
-  ensureUnsealed();
+            auto props = getConcreteProps();
+            auto state =
+                    std::static_pointer_cast<const RNCSafeAreaViewShadowNode::ConcreteState>(
+                            getState());
+            auto stateData = state->getData();
+            auto edges = props.edges;
 
-  auto &props = getConcreteProps();
-  auto state =
-      std::static_pointer_cast<const RNCSafeAreaViewShadowNode::ConcreteState>(
-          getState());
-  auto stateData = state->getData();
-  auto edges = props.edges;
+            // Get the current values for padding / margin. The only caveat here is that
+            // percent values are not supported. Also might need to add support for start
+            // / end.
+            YGValue top, left, right, bottom;
+            if (props.mode == RNCSafeAreaViewMode::Padding) {
+                top = valueFromEdges(props.yogaStyle.padding(), YGEdgeTop, YGEdgeVertical);
+                left =
+                        valueFromEdges(props.yogaStyle.padding(), YGEdgeLeft, YGEdgeHorizontal);
+                bottom =
+                        valueFromEdges(props.yogaStyle.padding(), YGEdgeBottom, YGEdgeVertical);
+                right = valueFromEdges(
+                        props.yogaStyle.padding(), YGEdgeRight, YGEdgeHorizontal);
+            } else {
+                top = valueFromEdges(props.yogaStyle.margin(), YGEdgeTop, YGEdgeVertical);
+                left =
+                        valueFromEdges(props.yogaStyle.margin(), YGEdgeLeft, YGEdgeHorizontal);
+                bottom =
+                        valueFromEdges(props.yogaStyle.margin(), YGEdgeBottom, YGEdgeVertical);
+                right =
+                        valueFromEdges(props.yogaStyle.margin(), YGEdgeRight, YGEdgeHorizontal);
+            }
 
-  // Get the current values for padding / margin. The only caveat here is that
-  // percent values are not supported. Also might need to add support for start
-  // / end.
-  Style::Length top, left, right, bottom;
-  if (props.mode == RNCSafeAreaViewMode::Padding) {
-    auto defaultPadding = props.yogaStyle.padding(Edge::All);
-    top = valueFromEdges(
-        props.yogaStyle.padding(Edge::Top),
-        props.yogaStyle.padding(Edge::Vertical),
-        defaultPadding);
-    left = valueFromEdges(
-        props.yogaStyle.padding(Edge::Left),
-        props.yogaStyle.padding(Edge::Horizontal),
-        defaultPadding);
-    bottom = valueFromEdges(
-        props.yogaStyle.padding(Edge::Bottom),
-        props.yogaStyle.padding(Edge::Vertical),
-        defaultPadding);
-    right = valueFromEdges(
-        props.yogaStyle.padding(Edge::Right),
-        props.yogaStyle.padding(Edge::Horizontal),
-        defaultPadding);
-  } else {
-    auto defaultMargin = props.yogaStyle.margin(Edge::All);
-    top = valueFromEdges(
-        props.yogaStyle.margin(Edge::Top),
-        props.yogaStyle.margin(Edge::Vertical),
-        defaultMargin);
-    left = valueFromEdges(
-        props.yogaStyle.margin(Edge::Left),
-        props.yogaStyle.margin(Edge::Horizontal),
-        defaultMargin);
-    bottom = valueFromEdges(
-        props.yogaStyle.margin(Edge::Bottom),
-        props.yogaStyle.margin(Edge::Vertical),
-        defaultMargin);
-    right = valueFromEdges(
-        props.yogaStyle.margin(Edge::Right),
-        props.yogaStyle.margin(Edge::Horizontal),
-        defaultMargin);
-  }
+            top = yogaStyleValueFromFloat(getEdgeValue(
+                    edges.top,
+                    stateData.insets.top,
+                    (top.unit == YGUnitPoint ? top.value : 0)));
+            left = yogaStyleValueFromFloat(getEdgeValue(
+                    edges.left,
+                    stateData.insets.left,
+                    (left.unit == YGUnitPoint ? left.value : 0)));
+            right = yogaStyleValueFromFloat(getEdgeValue(
+                    edges.right,
+                    stateData.insets.right,
+                    (right.unit == YGUnitPoint ? right.value : 0)));
+            bottom = yogaStyleValueFromFloat(getEdgeValue(
+                    edges.bottom,
+                    stateData.insets.bottom,
+                    (bottom.unit == YGUnitPoint ? bottom.value : 0)));
 
-  top.points(getEdgeValue(
-      edges.top, stateData.insets.top, top.value().unwrapOrDefault(0)));
-  left.points(getEdgeValue(
-      edges.left, stateData.insets.left, left.value().unwrapOrDefault(0)));
-  right.points(getEdgeValue(
-      edges.right, stateData.insets.right, right.value().unwrapOrDefault(0)));
-  bottom.points(getEdgeValue(
-      edges.bottom,
-      stateData.insets.bottom,
-      bottom.value().unwrapOrDefault(0)));
+            YGStyle adjustedStyle = getConcreteProps().yogaStyle;
+            if (props.mode == RNCSafeAreaViewMode::Padding) {
+                adjustedStyle.padding()[YGEdgeTop] = top;
+                adjustedStyle.padding()[YGEdgeLeft] = left;
+                adjustedStyle.padding()[YGEdgeRight] = right;
+                adjustedStyle.padding()[YGEdgeBottom] = bottom;
+            } else {
+                adjustedStyle.margin()[YGEdgeTop] = top;
+                adjustedStyle.margin()[YGEdgeLeft] = left;
+                adjustedStyle.margin()[YGEdgeRight] = right;
+                adjustedStyle.margin()[YGEdgeBottom] = bottom;
+            }
 
-  yoga::Style adjustedStyle = getConcreteProps().yogaStyle;
-  if (props.mode == RNCSafeAreaViewMode::Padding) {
-    adjustedStyle.setPadding(Edge::Top, top);
-    adjustedStyle.setPadding(Edge::Left, left);
-    adjustedStyle.setPadding(Edge::Right, right);
-    adjustedStyle.setPadding(Edge::Bottom, bottom);
-  } else {
-    adjustedStyle.setMargin(Edge::Top, top);
-    adjustedStyle.setMargin(Edge::Left, left);
-    adjustedStyle.setMargin(Edge::Right, right);
-    adjustedStyle.setMargin(Edge::Bottom, bottom);
-  }
+            auto currentStyle = yogaNode_.getStyle();
+            if (adjustedStyle.padding()[YGEdgeTop] != currentStyle.padding()[YGEdgeTop] ||
+                adjustedStyle.padding()[YGEdgeLeft] !=
+                currentStyle.padding()[YGEdgeLeft] ||
+                adjustedStyle.padding()[YGEdgeRight] !=
+                currentStyle.padding()[YGEdgeRight] ||
+                adjustedStyle.padding()[YGEdgeBottom] !=
+                currentStyle.padding()[YGEdgeBottom] ||
+                adjustedStyle.margin()[YGEdgeTop] != currentStyle.margin()[YGEdgeTop] ||
+                adjustedStyle.margin()[YGEdgeLeft] != currentStyle.margin()[YGEdgeLeft] ||
+                adjustedStyle.margin()[YGEdgeRight] !=
+                currentStyle.margin()[YGEdgeRight] ||
+                adjustedStyle.margin()[YGEdgeBottom] !=
+                currentStyle.margin()[YGEdgeBottom]) {
+                yogaNode_.setStyle(adjustedStyle);
+                yogaNode_.setDirty(true);
+            }
+        }
 
-  auto currentStyle = yogaNode_.style();
-  if (adjustedStyle.padding(Edge::Top) != currentStyle.padding(Edge::Top) ||
-      adjustedStyle.padding(Edge::Left) != currentStyle.padding(Edge::Left) ||
-      adjustedStyle.padding(Edge::Right) != currentStyle.padding(Edge::Right) ||
-      adjustedStyle.padding(Edge::Bottom) !=
-          currentStyle.padding(Edge::Bottom) ||
-      adjustedStyle.margin(Edge::Top) != currentStyle.margin(Edge::Top) ||
-      adjustedStyle.margin(Edge::Left) != currentStyle.margin(Edge::Left) ||
-      adjustedStyle.margin(Edge::Right) != currentStyle.margin(Edge::Right) ||
-      adjustedStyle.margin(Edge::Bottom) != currentStyle.margin(Edge::Bottom)) {
-    yogaNode_.setStyle(adjustedStyle);
-    yogaNode_.setDirty(true);
-  }
-}
-
-} // namespace react
+    } // namespace react
 } // namespace facebook
